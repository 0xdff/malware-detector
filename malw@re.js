const puppeteer = require('puppeteer');

async function detectMalware(url) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  
  let malwareIndicators = [];

  // Set up listeners for potential malicious behaviors
  await page.setRequestInterception(true);
  page.on('request', request => {
    if (request.resourceType() === 'script') {
      if (request.url().includes('suspicious-domain.com')) {
        malwareIndicators.push(`Suspicious script source: ${request.url()}`);
      }
    }
    request.continue();
  });

  page.on('dialog', async dialog => {
    malwareIndicators.push(`Unexpected dialog: ${dialog.message()}`);
    await dialog.dismiss();
  });

  // Navigate to the URL
  try {
    await page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });
  } catch (error) {
    malwareIndicators.push(`Navigation error: ${error.message}`);
  }

  // Check for suspicious elements or behaviors
  const suspiciousElements = await page.evaluate(() => {
    const elements = [];
    if (document.querySelector('iframe[style*="display:none"]')) {
      elements.push('Hidden iframe detected');
    }
    if (document.querySelector('script[src*="eval"]')) {
      elements.push('Suspicious script with eval detected');
    }
    return elements;
  });

  malwareIndicators = malwareIndicators.concat(suspiciousElements);

  // Check for obfuscated scripts
  const scripts = await page.evaluate(() => {
    return Array.from(document.getElementsByTagName('script'))
      .map(script => script.innerText)
      .filter(text => text.length > 0);
  });

  for (const script of scripts) {
    if (script.includes('eval(') || script.includes('decode(')) {
      malwareIndicators.push('Potentially obfuscated script detected');
      break;
    }
  }

  await browser.close();

  return {
    url: url,
    malwareDetected: malwareIndicators.length > 0,
    indicators: malwareIndicators
  };
}

// usage
detectMalware('https://example.com')
  .then(result => console.log(result))
  .catch(error => console.error('Error:', error));